// $ANTLR 3.3 Nov 30, 2010 12:50:56 /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g 2012-10-18 19:04:19

// AUTOGENERATED BY ANTLR!!! DO NOT MODIFY!!!

package com.gerixsoft.rtf2xml;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;


import org.antlr.runtime.tree.*;

public class RTFParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "XML_ELEMENT", "CODE", "Text", "CHAR", "'{'", "'}'"
    };
    public static final int EOF=-1;
    public static final int T__8=8;
    public static final int T__9=9;
    public static final int XML_ELEMENT=4;
    public static final int CODE=5;
    public static final int Text=6;
    public static final int CHAR=7;

    // delegates
    // delegators


        public RTFParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public RTFParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return RTFParser.tokenNames; }
    public String getGrammarFileName() { return "/home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g"; }


    public static class rtf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rtf"
    // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:26:1: rtf : group ;
    public final RTFParser.rtf_return rtf() throws RecognitionException {
        RTFParser.rtf_return retval = new RTFParser.rtf_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        RTFParser.group_return group1 = null;



        try {
            // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:26:5: ( group )
            // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:26:7: group
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_group_in_rtf57);
            group1=group();

            state._fsp--;

            adaptor.addChild(root_0, group1.getTree());

            }

            retval.stop = input.LT(-1);

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rtf"

    public static class group_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "group"
    // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:28:1: group : '{' ( group_ )+ '}' -> ^( XML_ELEMENT[\"group\"] ( group_ )+ ) ;
    public final RTFParser.group_return group() throws RecognitionException {
        RTFParser.group_return retval = new RTFParser.group_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal2=null;
        Token char_literal4=null;
        RTFParser.group__return group_3 = null;


        Object char_literal2_tree=null;
        Object char_literal4_tree=null;
        RewriteRuleTokenStream stream_9=new RewriteRuleTokenStream(adaptor,"token 9");
        RewriteRuleTokenStream stream_8=new RewriteRuleTokenStream(adaptor,"token 8");
        RewriteRuleSubtreeStream stream_group_=new RewriteRuleSubtreeStream(adaptor,"rule group_");
        try {
            // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:28:7: ( '{' ( group_ )+ '}' -> ^( XML_ELEMENT[\"group\"] ( group_ )+ ) )
            // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:28:9: '{' ( group_ )+ '}'
            {
            char_literal2=(Token)match(input,8,FOLLOW_8_in_group65);  
            stream_8.add(char_literal2);

            // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:28:13: ( group_ )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( ((LA1_0>=CODE && LA1_0<=Text)||LA1_0==8) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:28:13: group_
            	    {
            	    pushFollow(FOLLOW_group__in_group67);
            	    group_3=group_();

            	    state._fsp--;

            	    stream_group_.add(group_3.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);

            char_literal4=(Token)match(input,9,FOLLOW_9_in_group70);  
            stream_9.add(char_literal4);



            // AST REWRITE
            // elements: group_
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 28:25: -> ^( XML_ELEMENT[\"group\"] ( group_ )+ )
            {
                // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:28:28: ^( XML_ELEMENT[\"group\"] ( group_ )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(XML_ELEMENT, "group"), root_1);

                if ( !(stream_group_.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_group_.hasNext() ) {
                    adaptor.addChild(root_1, stream_group_.nextTree());

                }
                stream_group_.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "group"

    public static class group__return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "group_"
    // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:29:1: group_ : ( group | control | text );
    public final RTFParser.group__return group_() throws RecognitionException {
        RTFParser.group__return retval = new RTFParser.group__return();
        retval.start = input.LT(1);

        Object root_0 = null;

        RTFParser.group_return group5 = null;

        RTFParser.control_return control6 = null;

        RTFParser.text_return text7 = null;



        try {
            // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:29:7: ( group | control | text )
            int alt2=3;
            switch ( input.LA(1) ) {
            case 8:
                {
                alt2=1;
                }
                break;
            case CODE:
                {
                alt2=2;
                }
                break;
            case Text:
                {
                alt2=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;
            }

            switch (alt2) {
                case 1 :
                    // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:29:9: group
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_group_in_group_86);
                    group5=group();

                    state._fsp--;

                    adaptor.addChild(root_0, group5.getTree());

                    }
                    break;
                case 2 :
                    // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:29:15: control
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_control_in_group_88);
                    control6=control();

                    state._fsp--;

                    adaptor.addChild(root_0, control6.getTree());

                    }
                    break;
                case 3 :
                    // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:29:23: text
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_text_in_group_90);
                    text7=text();

                    state._fsp--;

                    adaptor.addChild(root_0, text7.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "group_"

    public static class control_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "control"
    // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:31:1: control : CODE ;
    public final RTFParser.control_return control() throws RecognitionException {
        RTFParser.control_return retval = new RTFParser.control_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token CODE8=null;

        Object CODE8_tree=null;

        try {
            // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:31:9: ( CODE )
            // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:31:11: CODE
            {
            root_0 = (Object)adaptor.nil();

            CODE8=(Token)match(input,CODE,FOLLOW_CODE_in_control98); 
            CODE8_tree = (Object)adaptor.create(CODE8);
            adaptor.addChild(root_0, CODE8_tree);


            }

            retval.stop = input.LT(-1);

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "control"

    public static class text_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "text"
    // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:34:1: text : Text ;
    public final RTFParser.text_return text() throws RecognitionException {
        RTFParser.text_return retval = new RTFParser.text_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token Text9=null;

        Object Text9_tree=null;

        try {
            // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:34:5: ( Text )
            // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:34:7: Text
            {
            root_0 = (Object)adaptor.nil();

            Text9=(Token)match(input,Text,FOLLOW_Text_in_text129); 
            Text9_tree = (Object)adaptor.create(Text9);
            adaptor.addChild(root_0, Text9_tree);


            }

            retval.stop = input.LT(-1);

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "text"

    // Delegated rules


 

    public static final BitSet FOLLOW_group_in_rtf57 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_8_in_group65 = new BitSet(new long[]{0x0000000000000160L});
    public static final BitSet FOLLOW_group__in_group67 = new BitSet(new long[]{0x0000000000000360L});
    public static final BitSet FOLLOW_9_in_group70 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_in_group_86 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_control_in_group_88 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_text_in_group_90 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CODE_in_control98 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Text_in_text129 = new BitSet(new long[]{0x0000000000000002L});

}