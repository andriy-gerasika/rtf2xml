// $ANTLR 3.3 Nov 30, 2010 12:50:56 /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g 2012-10-18 19:04:20

// AUTOGENERATED BY ANTLR!!! DO NOT MODIFY!!!

package com.gerixsoft.rtf2xml;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

public class RTFLexer extends Lexer {
    public static final int EOF=-1;
    public static final int T__8=8;
    public static final int T__9=9;
    public static final int XML_ELEMENT=4;
    public static final int CODE=5;
    public static final int Text=6;
    public static final int CHAR=7;

    // delegates
    // delegators

    public RTFLexer() {;} 
    public RTFLexer(CharStream input) {
        this(input, new RecognizerSharedState());
    }
    public RTFLexer(CharStream input, RecognizerSharedState state) {
        super(input,state);

    }
    public String getGrammarFileName() { return "/home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g"; }

    // $ANTLR start "T__8"
    public final void mT__8() throws RecognitionException {
        try {
            int _type = T__8;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:13:6: ( '{' )
            // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:13:8: '{'
            {
            match('{'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__8"

    // $ANTLR start "T__9"
    public final void mT__9() throws RecognitionException {
        try {
            int _type = T__9;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:14:6: ( '}' )
            // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:14:8: '}'
            {
            match('}'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__9"

    // $ANTLR start "CODE"
    public final void mCODE() throws RecognitionException {
        try {
            int _type = CODE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:32:6: ( '\\\\' ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' )+ )
            // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:32:8: '\\\\' ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' )+
            {
            match('\\'); 
            // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:32:13: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( ((LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='Z')||(LA1_0>='a' && LA1_0<='z')) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:
            	    {
            	    if ( (input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z') ) {
            	        input.consume();

            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        recover(mse);
            	        throw mse;}


            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);

            setText(getText().substring(1));

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CODE"

    // $ANTLR start "Text"
    public final void mText() throws RecognitionException {
        try {
            int _type = Text;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:35:5: ( ( CHAR )+ )
            // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:35:7: ( CHAR )+
            {
            // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:35:7: ( CHAR )+
            int cnt2=0;
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( ((LA2_0>='\u0000' && LA2_0<='[')||(LA2_0>=']' && LA2_0<='z')||LA2_0=='|'||(LA2_0>='~' && LA2_0<='\uFFFF')) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:35:7: CHAR
            	    {
            	    mCHAR(); 

            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        throw eee;
                }
                cnt2++;
            } while (true);


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Text"

    // $ANTLR start "CHAR"
    public final void mCHAR() throws RecognitionException {
        try {
            // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:37:5: ( '\\u0000' .. '\\u005b' | '\\u005d' .. '\\u007a' | '\\u007c' | '\\u007e' .. '\\uffff' )
            // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:
            {
            if ( (input.LA(1)>='\u0000' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='z')||input.LA(1)=='|'||(input.LA(1)>='~' && input.LA(1)<='\uFFFF') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "CHAR"

    public void mTokens() throws RecognitionException {
        // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:1:8: ( T__8 | T__9 | CODE | Text )
        int alt3=4;
        int LA3_0 = input.LA(1);

        if ( (LA3_0=='{') ) {
            alt3=1;
        }
        else if ( (LA3_0=='}') ) {
            alt3=2;
        }
        else if ( (LA3_0=='\\') ) {
            alt3=3;
        }
        else if ( ((LA3_0>='\u0000' && LA3_0<='[')||(LA3_0>=']' && LA3_0<='z')||LA3_0=='|'||(LA3_0>='~' && LA3_0<='\uFFFF')) ) {
            alt3=4;
        }
        else {
            NoViableAltException nvae =
                new NoViableAltException("", 3, 0, input);

            throw nvae;
        }
        switch (alt3) {
            case 1 :
                // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:1:10: T__8
                {
                mT__8(); 

                }
                break;
            case 2 :
                // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:1:15: T__9
                {
                mT__9(); 

                }
                break;
            case 3 :
                // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:1:20: CODE
                {
                mCODE(); 

                }
                break;
            case 4 :
                // /home/andriy/Projects.git/rtf2xml/src/com/gerixsoft/rtf2xml/RTF.g:1:25: Text
                {
                mText(); 

                }
                break;

        }

    }


 

}